import time
import os
import sys
import random
import threading
from datetime import datetime
import json

# ==================== M√ÄU S·∫ÆC & HI·ªÜU ·ª®NG ====================
class Colors:
    # Basic Colors
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"
    ITALIC = "\033[3m"
    UNDERLINE = "\033[4m"
    BLINK = "\033[5m"
    REVERSE = "\033[7m"
    
    # Text Colors
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    # Bright Colors
    BRIGHT_BLACK = "\033[90m"
    BRIGHT_RED = "\033[91m"
    BRIGHT_GREEN = "\033[92m"
    BRIGHT_YELLOW = "\033[93m"
    BRIGHT_BLUE = "\033[94m"
    BRIGHT_MAGENTA = "\033[95m"
    BRIGHT_CYAN = "\033[96m"
    BRIGHT_WHITE = "\033[97m"
    
    # Background Colors
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"

class Effects:
    @staticmethod
    def rainbow_text(text):
        """T·∫°o hi·ªáu ·ª©ng rainbow cho text"""
        colors = [Colors.RED, Colors.YELLOW, Colors.GREEN, Colors.CYAN, Colors.BLUE, Colors.MAGENTA]
        result = ""
        for i, char in enumerate(text):
            if char != ' ':
                result += colors[i % len(colors)] + char + Colors.RESET
            else:
                result += char
        return result
    
    @staticmethod
    def gradient_text(text, start_color, end_color):
        """T·∫°o hi·ªáu ·ª©ng gradient cho text"""
        # Simplified gradient effect
        mid_point = len(text) // 2
        result = ""
        for i, char in enumerate(text):
            if i < mid_point:
                result += start_color + char + Colors.RESET
            else:
                result += end_color + char + Colors.RESET
        return result
    
    @staticmethod
    def glow_effect(text, color):
        """T·∫°o hi·ªáu ·ª©ng ph√°t s√°ng"""
        return f"{color}{Colors.BOLD}{text}{Colors.RESET}"
    
    @staticmethod
    def typewriter_with_sparks(text, speed=0.05):
        """Hi·ªáu ·ª©ng ƒë√°nh m√°y v·ªõi tia l·ª≠a"""
        sparkles = ["‚ú®", "‚≠ê", "üí´", "üåü", "‚ú¥Ô∏è", "üí•"]
        for i, char in enumerate(text):
            print(char, end='', flush=True)
            if random.random() > 0.8:  # 20% chance cho sparkle
                spark = random.choice(sparkles)
                print(f" {spark}", end='', flush=True)
                time.sleep(0.1)
                print(f"\b\b ", end='', flush=True)
            time.sleep(speed)
        print()

class AudioEffects:
    @staticmethod
    def play_sound_effect(effect_type):
        """Ph√°t √¢m thanh hi·ªáu ·ª©ng ƒë∆°n gi·∫£n"""
        try:
            if effect_type == "start":
                # √Çm thanh b·∫Øt ƒë·∫ßu
                for freq in [440, 554, 659]:
                    AudioEffects.beep(freq, 0.1)
            elif effect_type == "complete":
                # √Çm thanh ho√†n th√†nh
                for freq in [523, 659, 784, 1047]:
                    AudioEffects.beep(freq, 0.15)
            elif effect_type == "error":
                # √Çm thanh l·ªói
                AudioEffects.beep(200, 0.3)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ ph√°t √¢m thanh
    
    @staticmethod
    def beep(frequency, duration):
        """T·∫°o √¢m beep ƒë∆°n gi·∫£n"""
        try:
            import winsound
            winsound.Beep(int(frequency), int(duration * 1000))
        except:
            # Fallback cho c√°c h·ªá ƒëi·ªÅu h√†nh kh√°c
            print(f"\a", end='', flush=True)

class ProgressBar:
    def __init__(self, total, length=50):
        self.total = total
        self.length = length
        self.current = 0
    
    def update(self, value):
        self.current = value
        percent = (self.current / self.total) * 100
        filled = int((self.current / self.total) * self.length)
        bar = "‚ñà" * filled + "‚ñë" * (self.length - filled)
        
        # Rainbow progress bar
        rainbow_bar = ""
        colors = [Colors.RED, Colors.YELLOW, Colors.GREEN, Colors.CYAN, Colors.BLUE, Colors.MAGENTA]
        for i, char in enumerate(bar):
            if char == "‚ñà":
                rainbow_bar += colors[i % len(colors)] + char + Colors.RESET
            else:
                rainbow_bar += Colors.DIM + char + Colors.RESET
        
        print(f"\r{Colors.CYAN}Progress: {rainbow_bar} {percent:.1f}%{Colors.RESET}", end='', flush=True)

# ==================== D·ªÆ LI·ªÜU & QU·∫¢N L√ù ====================
class LyricsManager:
    def __init__(self, filename="lyrics_data.json"):
        self.filename = filename
        self.lyrics = self.load_lyrics()
    
    def load_lyrics(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            with open(self.filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            # D·ªØ li·ªáu m·∫∑c ƒë·ªãnh
            return [
                {"text": "Anh vui", "delay": 1.2, "speed": 0.08, "color": "WHITE"},
                {"text": "Sao n∆∞·ªõc m·∫Øt c·ª© tu√¥n tr√†o", "delay": 2.5, "speed": 0.08, "color": "CYAN"},
                {"text": "Ch·∫≥ng ph·∫£i nh∆∞ th·∫ø qu√° t·ªët hay sao", "delay": 3.0, "speed": 0.08, "color": "YELLOW"},
                {"text": "Anh ta ƒë√°ng gi√° nh·ªØng g√¨ cho", "delay": 2.5, "speed": 0.08, "color": "GREEN"},
                {"text": "Ng∆∞·ªùi l·∫°i nh√¨n anh trong ch·∫≥ng ra sao", "delay": 3.0, "speed": 0.08, "color": "MAGENTA"},
                {"text": "C≈©ng ƒë·ª´ng th·ªëi", "delay": 1.8, "speed": 0.08, "color": "RED"},
            ]
    
    def save_lyrics(self):
        """L∆∞u d·ªØ li·ªáu v√†o file JSON"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.lyrics, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"{Colors.RED}L·ªói khi l∆∞u file: {e}{Colors.RESET}")
    
    def add_lyric(self, text, delay, speed, color="WHITE"):
        """Th√™m l·ªùi b√†i h√°t m·ªõi"""
        self.lyrics.append({
            "text": text,
            "delay": delay,
            "speed": speed,
            "color": color
        })
        self.save_lyrics()

# ==================== HI·ªÜU ·ª®NG N√ÇNG CAO ====================
class AdvancedEffects:
    @staticmethod
    def clear_screen():
        """X√≥a m√†n h√¨nh"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    @staticmethod
    def center_text(text, width=80):
        """CƒÉn gi·ªØa text"""
        return text.center(width)
    
    @staticmethod
    def create_border(text, char="‚ïê", color=Colors.CYAN):
        """T·∫°o khung vi·ªÅn cho text"""
        lines = text.split('\n')
        max_length = max(len(line) for line in lines)
        
        border_top = f"{color}‚ïî{'‚ïê' * (max_length + 2)}‚ïó{Colors.RESET}"
        border_bottom = f"{color}‚ïö{'‚ïê' * (max_length + 2)}‚ïù{Colors.RESET}"
        
        result = [border_top]
        for line in lines:
            result.append(f"{color}‚ïë{Colors.RESET} {line.ljust(max_length)} {color}‚ïë{Colors.RESET}")
        result.append(border_bottom)
        
        return '\n'.join(result)
    
    @staticmethod
    def animate_text_wave(text, delay=0.1):
        """Hi·ªáu ·ª©ng s√≥ng cho text"""
        for i in range(len(text) + 10):
            display = ""
            for j, char in enumerate(text):
                distance = abs(i - j)
                if distance < 3:
                    if distance == 0:
                        display += f"{Colors.BRIGHT_YELLOW}{Colors.BOLD}{char}{Colors.RESET}"
                    elif distance == 1:
                        display += f"{Colors.YELLOW}{char}{Colors.RESET}"
                    else:
                        display += f"{Colors.DIM}{char}{Colors.RESET}"
                else:
                    display += char
            
            print(f"\r{display}", end='', flush=True)
            time.sleep(delay)
        print()
    
    @staticmethod
    def matrix_rain(duration=3):
        """Hi·ªáu ·ª©ng m∆∞a Matrix"""
        import random
        
        def rain():
            chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
            start_time = time.time()
            
            while time.time() - start_time < duration:
                line = ""
                for _ in range(80):
                    if random.random() > 0.7:
                        char = random.choice(chars)
                        line += f"{Colors.GREEN}{char}{Colors.RESET}"
                    else:
                        line += " "
                print(line)
                time.sleep(0.05)
        
        threading.Thread(target=rain, daemon=True).start()

# ==================== CH∆Ø∆†NG TR√åNH CH√çNH ====================
class UltraLyricsPlayer:
    def __init__(self):
        self.manager = LyricsManager()
        self.is_playing = False
        
    def show_welcome_screen(self):
        """M√†n h√¨nh ch√†o m·ª´ng thanh l·ªãch"""
        AdvancedEffects.clear_screen()
        
        # Logo ƒë∆°n gi·∫£n v√† ƒë·∫πp
        print(f"\n{Colors.CYAN}")
        print("    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("    ‚ïë                                   ‚ïë")
        print("    ‚ïë        LYRICS  PLAYER             ‚ïë")
        print("    ‚ïë                                   ‚ïë")
        print("    ‚ïë     Phi√™n b·∫£n n√¢ng cao 2.0       ‚ïë")
        print("    ‚ïë                                   ‚ïë")
        print("    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Colors.RESET}\n")
        
        print(f"{Colors.WHITE}    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr√¨nh ph√°t l·ªùi b√†i h√°t{Colors.RESET}")
        print(f"{Colors.DIM}    V·ªõi c√°c hi·ªáu ·ª©ng typewriter ƒë·∫∑c bi·ªát{Colors.RESET}\n")
        
        # Loading ƒë∆°n gi·∫£n
        print(f"{Colors.YELLOW}    ƒêang kh·ªüi t·∫°o", end="", flush=True)
        for i in range(3):
            time.sleep(0.5)
            print(".", end="", flush=True)
        print(f" Ho√†n th√†nh!{Colors.RESET}\n")
        
        print(f"{Colors.GREEN}    Nh·∫•n Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu...{Colors.RESET}")
        input()
    
    def show_menu(self):
        """Menu ch√≠nh ƒë·∫πp v√† kh√¥ng d·ªã h·ª£m"""
        AdvancedEffects.clear_screen()
        
        # Logo ƒë∆°n gi·∫£n
        print(f"{Colors.CYAN}{Colors.BOLD}")
        print("    ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó")
        print("    ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù")
        print("    ‚ñà‚ñà‚ïë      ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó")
        print("    ‚ñà‚ñà‚ïë       ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë")
        print("    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë")
        print("    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Colors.RESET}\n")
        
        print(f"{Colors.WHITE}{Colors.BOLD}    Lyrics Player - Phi√™n b·∫£n ƒë·∫∑c bi·ªát{Colors.RESET}")
        print(f"{Colors.DIM}    T·ªïng l·ªùi b√†i h√°t: {len(self.manager.lyrics)}{Colors.RESET}\n")
        
        # Menu ƒë∆°n gi·∫£n kh√¥ng emoji
        print(f"{Colors.YELLOW}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET}              MENU CH√çNH             {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET} {Colors.BRIGHT_WHITE}1.{Colors.RESET} Ph√°t l·ªùi b√†i h√°t               {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET} {Colors.BRIGHT_WHITE}2.{Colors.RESET} Th√™m l·ªùi m·ªõi                   {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET} {Colors.BRIGHT_WHITE}3.{Colors.RESET} Xem danh s√°ch                  {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET} {Colors.BRIGHT_WHITE}4.{Colors.RESET} C√†i ƒë·∫∑t                       {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îÇ{Colors.RESET} {Colors.BRIGHT_WHITE}0.{Colors.RESET} Tho√°t                          {Colors.YELLOW}‚îÇ{Colors.RESET}")
        print(f"{Colors.YELLOW}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò{Colors.RESET}\n")
    
    def display_lyrics_with_effects(self):
        """Ph√°t l·ªùi b√†i h√°t v·ªõi hi·ªáu ·ª©ng ƒë·∫πp v√† thanh l·ªãch"""
        if not self.manager.lyrics:
            print(f"{Colors.RED}Kh√¥ng c√≥ l·ªùi b√†i h√°t n√†o ƒë·ªÉ ph√°t!{Colors.RESET}")
            return
        
        AdvancedEffects.clear_screen()
        self.is_playing = True
        
        # Header ƒë∆°n gi·∫£n
        print(f"{Colors.CYAN}{'‚ïê' * 50}{Colors.RESET}")
        print(f"{Colors.WHITE}{Colors.BOLD}              ƒêANG PH√ÅT NH·∫†C              {Colors.RESET}")
        print(f"{Colors.CYAN}{'‚ïê' * 50}{Colors.RESET}\n")
        
        try:
            total = len(self.manager.lyrics)
            
            for i, lyric in enumerate(self.manager.lyrics):
                if not self.is_playing:
                    break
                
                # Hi·ªÉn th·ªã progress ƒë∆°n gi·∫£n
                progress = f"[{i+1}/{total}]"
                print(f"{Colors.DIM}{progress}{Colors.RESET}", end=" ")
                
                # L·∫•y m√†u s·∫Øc
                color = getattr(Colors, lyric.get('color', 'WHITE'), Colors.WHITE)
                
                # Hi·ªáu ·ª©ng typewriter ƒë∆°n gi·∫£n nh∆∞ng ƒë·∫πp
                text = lyric['text']
                print(f"{color}", end="")
                
                for char in text:
                    print(char, end='', flush=True)
                    time.sleep(lyric['speed'])
                
                print(f"{Colors.RESET}")
                print()  # D√≤ng tr·ªëng
                
                # Ngh·ªâ gi·ªØa c√°c c√¢u
                time.sleep(lyric['delay'])
            
            print(f"{Colors.GREEN}{'‚îÄ' * 30}{Colors.RESET}")
            print(f"{Colors.GREEN}    Ho√†n th√†nh! {Colors.RESET}")
            print(f"{Colors.GREEN}{'‚îÄ' * 30}{Colors.RESET}")
            
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}ƒê√£ d·ª´ng ph√°t!{Colors.RESET}")
        
        self.is_playing = False
        input(f"\n{Colors.DIM}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
    
    def add_lyric_interactive(self):
        """Th√™m l·ªùi b√†i h√°t v·ªõi giao di·ªán ƒë·∫πp"""
        AdvancedEffects.clear_screen()
        
        header = AdvancedEffects.create_border("‚ûï TH√äM L·ªúI B√ÄI H√ÅT M·ªöI", color=Colors.GREEN)
        print(header)
        print()
        
        try:
            # Nh·∫≠p text
            print(f"{Colors.YELLOW}üìù Nh·∫≠p l·ªùi b√†i h√°t:{Colors.RESET}")
            text = input(f"{Colors.CYAN}> {Colors.RESET}")
            
            if not text.strip():
                print(f"{Colors.RED}‚ùå Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng!{Colors.RESET}")
                return
            
            # Nh·∫≠p delay
            print(f"\n{Colors.YELLOW}‚è±Ô∏è  Th·ªùi gian ngh·ªâ sau c√¢u n√†y (gi√¢y):{Colors.RESET}")
            delay = float(input(f"{Colors.CYAN}> {Colors.RESET}") or "2.0")
            
            # Nh·∫≠p speed
            print(f"\n{Colors.YELLOW}‚ö° T·ªëc ƒë·ªô hi·ªÉn th·ªã (0.05=nhanh, 0.2=ch·∫≠m):{Colors.RESET}")
            speed = float(input(f"{Colors.CYAN}> {Colors.RESET}") or "0.08")
            
            # Ch·ªçn m√†u
            colors = ["WHITE", "RED", "GREEN", "YELLOW", "BLUE", "MAGENTA", "CYAN"]
            print(f"\n{Colors.YELLOW}üé® Ch·ªçn m√†u s·∫Øc:{Colors.RESET}")
            for i, color in enumerate(colors, 1):
                color_code = getattr(Colors, color)
                print(f"  {i}. {color_code}{color}{Colors.RESET}")
            
            color_choice = input(f"{Colors.CYAN}> Ch·ªçn s·ªë (1-{len(colors)}) ho·∫∑c Enter cho m·∫∑c ƒë·ªãnh: {Colors.RESET}")
            
            if color_choice.isdigit() and 1 <= int(color_choice) <= len(colors):
                color = colors[int(color_choice) - 1]
            else:
                color = "WHITE"
            
            # Th√™m v√†o danh s√°ch
            self.manager.add_lyric(text, delay, speed, color)
            
            print(f"\n{Colors.GREEN}‚úÖ ƒê√£ th√™m th√†nh c√¥ng!{Colors.RESET}")
            
            # Preview
            print(f"\n{Colors.CYAN}üîç Preview:{Colors.RESET}")
            color_code = getattr(Colors, color)
            Effects.typewriter_with_sparks(f"{color_code}{text}{Colors.RESET}", speed)
            
            AudioEffects.play_sound_effect("complete")
            
        except ValueError:
            print(f"{Colors.RED}‚ùå L·ªói: Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!{Colors.RESET}")
            AudioEffects.play_sound_effect("error")
        except Exception as e:
            print(f"{Colors.RED}‚ùå L·ªói: {e}{Colors.RESET}")
            AudioEffects.play_sound_effect("error")
        
        input(f"\n{Colors.CYAN}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
    
    def show_lyrics_list(self):
        """Hi·ªÉn th·ªã danh s√°ch v·ªõi hi·ªáu ·ª©ng ƒë·∫πp"""
        AdvancedEffects.clear_screen()
        
        header = AdvancedEffects.create_border("üìã DANH S√ÅCH L·ªúI B√ÄI H√ÅT", color=Colors.BLUE)
        print(header)
        print()
        
        if not self.manager.lyrics:
            print(f"{Colors.RED}‚ùå Ch∆∞a c√≥ l·ªùi b√†i h√°t n√†o!{Colors.RESET}")
        else:
            for i, lyric in enumerate(self.manager.lyrics, 1):
                color_code = getattr(Colors, lyric.get('color', 'WHITE'), Colors.WHITE)
                
                # Hi·ªÉn th·ªã v·ªõi s·ªë th·ª© t·ª± v√† m√†u s·∫Øc
                print(f"{Colors.CYAN}{i:2d}.{Colors.RESET} {color_code}{lyric['text']}{Colors.RESET}")
                print(f"    {Colors.DIM}‚è±Ô∏è  {lyric['delay']}s | ‚ö° {lyric['speed']}s/char | üé® {lyric.get('color', 'WHITE')}{Colors.RESET}")
                print()
        
        print(f"{Colors.YELLOW}üìä T·ªïng c·ªông: {len(self.manager.lyrics)} c√¢u h√°t{Colors.RESET}")
        input(f"\n{Colors.CYAN}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
    
    def demo_effects(self):
        """Demo c√°c hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát"""
        AdvancedEffects.clear_screen()
        
        effects_demo = [
            ("üåà Rainbow Text", lambda: print(Effects.rainbow_text("ƒê√¢y l√† hi·ªáu ·ª©ng Rainbow Text tuy·ªát ƒë·∫πp!"))),
            ("‚ú® Glow Effect", lambda: print(Effects.glow_effect("Text n√†y ƒëang ph√°t s√°ng!", Colors.CYAN))),
            ("üåä Wave Animation", lambda: AdvancedEffects.animate_text_wave("Hi·ªáu ·ª©ng s√≥ng c·ª±c k·ª≥ m∆∞·ª£t m√†!")),
            ("üí´ Typewriter + Sparks", lambda: Effects.typewriter_with_sparks("ƒê√°nh m√°y v·ªõi tia l·ª≠a lung linh!")),
            ("üé≠ Matrix Rain", lambda: AdvancedEffects.matrix_rain(2)),
        ]
        
        header = AdvancedEffects.create_border("üé® DEMO HI·ªÜU ·ª®NG ƒê·∫∂C BI·ªÜT", color=Colors.MAGENTA)
        print(header)
        print()
        
        for name, effect_func in effects_demo:
            print(f"{Colors.YELLOW}ƒêang demo: {name}{Colors.RESET}")
            print("-" * 50)
            effect_func()
            print("\n")
            time.sleep(1)
        
        print(f"{Colors.GREEN}üéâ Demo ho√†n th√†nh!{Colors.RESET}")
        input(f"\n{Colors.CYAN}Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...{Colors.RESET}")
    
    def run(self):
        """Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh"""
        self.show_welcome_screen()
        
        while True:
            self.show_menu()
            
            choice = input(f"{Colors.CYAN}L·ª±a ch·ªçn: {Colors.RESET}")
            
            if choice == "1":
                self.display_lyrics_with_effects()
            elif choice == "2":
                self.add_lyric_interactive()
            elif choice == "3":
                self.show_lyrics_list()
            elif choice == "4":
                print(f"{Colors.YELLOW}T√≠nh nƒÉng c√†i ƒë·∫∑t ƒëang ph√°t tri·ªÉn...{Colors.RESET}")
                time.sleep(1)
            elif choice == "0":
                AdvancedEffects.clear_screen()
                print(f"\n{Colors.CYAN}    C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Lyrics Player!{Colors.RESET}")
                print(f"{Colors.DIM}    H·∫πn g·∫∑p l·∫°i! {Colors.RESET}\n")
                break
            else:
                print(f"{Colors.RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 0-4.{Colors.RESET}")
                time.sleep(1)

if __name__ == "__main__":
    try:
        player = UltraLyricsPlayer()
        player.run()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}üëã ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh!{Colors.RESET}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå L·ªói: {e}{Colors.RESET}")